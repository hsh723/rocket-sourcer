<?php

namespace Tests\Security;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\User;

class VulnerabilityTest extends TestCase
{
    use RefreshDatabase;

    /**
     * 인증 우회 취약점 테스트
     *
     * @return void
     */
    public function testAuthenticationBypass()
    {
        // 1. 인증이 필요한 온보딩 API 엔드포인트에 인증 없이 접근 시도
        $response = $this->get('/api/onboarding/status');
        $response->assertStatus(401); // 인증되지 않은 요청은 401 응답 코드를 반환해야 함
        
        // 2. 인증이 필요한 도움말 피드백 API 엔드포인트에 인증 없이 접근 시도
        $response = $this->post('/api/help/feedback', [
            'category_slug' => 'getting-started',
            'article_slug' => 'introduction',
            'is_helpful' => true
        ]);
        $response->assertStatus(401); // 인증되지 않은 요청은 401 응답 코드를 반환해야 함
        
        // 3. 관리자 전용 도움말 편집 페이지에 일반 사용자로 접근 시도
        $user = User::factory()->create(['role' => 'user']);
        $this->actingAs($user);
        
        $response = $this->get('/help/edit');
        $response->assertStatus(403); // 권한이 없는 요청은 403 응답 코드를 반환해야 함
    }
    
    /**
     * CSRF 취약점 테스트
     *
     * @return void
     */
    public function testCsrfProtection()
    {
        // 1. CSRF 토큰 없이 도움말 카테고리 저장 시도
        $admin = User::factory()->create(['role' => 'admin']);
        $this->actingAs($admin);
        
        // Laravel의 테스트 클라이언트는 기본적으로 CSRF 보호를 비활성화하므로,
        // 여기서는 withoutMiddleware 메서드를 사용하지 않고 직접 요청을 보냄
        $response = $this->post('/help/category/save', [
            'slug' => 'test-category',
            'name' => '테스트 카테고리',
            'description' => '테스트 카테고리 설명',
            'icon' => 'fa-book'
        ], ['X-CSRF-TOKEN' => 'invalid-token']);
        
        // CSRF 보호가 활성화되어 있으면 419 응답 코드를 반환해야 함
        $response->assertStatus(419);
    }
    
    /**
     * XSS 취약점 테스트
     *
     * @return void
     */
    public function testXssProtection()
    {
        // 1. XSS 공격 스크립트가 포함된 도움말 항목 저장 시도
        $admin = User::factory()->create(['role' => 'admin']);
        $this->actingAs($admin);
        
        $xssScript = "<script>alert('XSS');</script>";
        $content = "# 테스트 항목\n\n{$xssScript}";
        
        $response = $this->post('/help/save', [
            'category_slug' => 'test-category',
            'article_slug' => 'test-article',
            'content' => $content
        ]);
        
        $response->assertStatus(302); // 리다이렉트
        
        // 2. 저장된 도움말 항목 확인
        $response = $this->get('/help/article/test-category/test-article');
        $response->assertStatus(200);
        
        // XSS 스크립트가 이스케이프되어야 함
        $response->assertDontSee($xssScript, false);
        $response->assertSee(htmlspecialchars($xssScript), false);
    }
    
    /**
     * SQL 인젝션 취약점 테스트
     *
     * @return void
     */
    public function testSqlInjectionProtection()
    {
        // 1. SQL 인젝션 공격이 포함된 검색어로 검색 시도
        $sqlInjection = "'; DROP TABLE users; --";
        
        $response = $this->get('/api/help/search?q=' . urlencode($sqlInjection));
        $response->assertStatus(200);
        
        // 2. 사용자 테이블이 여전히 존재하는지 확인
        $this->assertDatabaseHas('users', [
            'id' => 1
        ]);
    }
    
    /**
     * 권한 상승 취약점 테스트
     *
     * @return void
     */
    public function testPrivilegeEscalation()
    {
        // 1. 일반 사용자 생성
        $user = User::factory()->create(['role' => 'user']);
        $this->actingAs($user);
        
        // 2. 관리자 전용 도움말 카테고리 저장 시도
        $response = $this->post('/help/category/save', [
            'slug' => 'test-category',
            'name' => '테스트 카테고리',
            'description' => '테스트 카테고리 설명',
            'icon' => 'fa-book'
        ]);
        
        $response->assertStatus(403); // 권한이 없는 요청은 403 응답 코드를 반환해야 함
        
        // 3. 관리자 전용 도움말 항목 삭제 시도
        $response = $this->post('/help/delete', [
            'category_slug' => 'getting-started',
            'article_slug' => 'introduction'
        ]);
        
        $response->assertStatus(403); // 권한이 없는 요청은 403 응답 코드를 반환해야 함
    }
    
    /**
     * 경로 순회 취약점 테스트
     *
     * @return void
     */
    public function testPathTraversalProtection()
    {
        // 1. 경로 순회 공격이 포함된 카테고리 슬러그로 접근 시도
        $pathTraversal = '../../../etc/passwd';
        
        $response = $this->get('/help/category/' . urlencode($pathTraversal));
        $response->assertStatus(404); // 존재하지 않는 카테고리로 처리되어야 함
        
        // 2. 경로 순회 공격이 포함된 항목 슬러그로 접근 시도
        $response = $this->get('/help/article/getting-started/' . urlencode($pathTraversal));
        $response->assertStatus(404); // 존재하지 않는 항목으로 처리되어야 함
    }
    
    /**
     * 세션 고정 취약점 테스트
     *
     * @return void
     */
    public function testSessionFixationProtection()
    {
        // 1. 로그인 전 세션 ID 확인
        $beforeLoginSessionId = $this->app['session']->getId();
        
        // 2. 로그인
        $user = User::factory()->create([
            'email' => 'test@example.com',
            'password' => bcrypt('password')
        ]);
        
        $response = $this->post('/login', [
            'email' => 'test@example.com',
            'password' => 'password'
        ]);
        
        // 3. 로그인 후 세션 ID 확인
        $afterLoginSessionId = $this->app['session']->getId();
        
        // 로그인 후 세션 ID가 변경되어야 함
        $this->assertNotEquals($beforeLoginSessionId, $afterLoginSessionId);
    }
    
    /**
     * 중요 데이터 노출 취약점 테스트
     *
     * @return void
     */
    public function testSensitiveDataExposure()
    {
        // 1. 사용자 생성
        $user = User::factory()->create([
            'email' => 'test@example.com',
            'password' => bcrypt('secret_password')
        ]);
        $this->actingAs($user);
        
        // 2. 사용자 정보 API 호출
        $response = $this->get('/api/user');
        $response->assertStatus(200);
        
        // 3. 응답에 비밀번호 해시가 포함되어 있지 않은지 확인
        $response->assertJsonMissing(['password']);
    }
} 